"use strict";

require("@babel/polyfill");

var _api = require("./api");

var _mongoose = _interopRequireDefault(require("mongoose"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _cors = _interopRequireDefault(require("cors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var express = require('express');

var app = express();
var PORT = 3000;
_mongoose["default"].Promise = global.Promise;

_mongoose["default"].connect('mongodb://localhost/innotym', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}); // const users=[
//     {id: 1, name:'John'},
//     {id: 2, name:'Johny'},
//     {id: 3, name:'Tony'},
//     {id: 4, name:'Rocky'},
// ]


app.use(_bodyParser["default"].json());
app.use(_bodyParser["default"].urlencoded({
  extended: false
}));
app.use((0, _cors["default"])());
app.use('/api', _api.restRouter);
app.use(function (req, res, next) {
  var error = new Error("Not Founf");
  error.status = 404;
  error.message = "Invalid route";
  next(error);
});
app.use(function (error, req, res, next) {
  res.status(error.status || 500);
  return res.json({
    error: {
      message: error.message
    }
  });
});
app.use(function (req, res, next) {
  console.log("middleware before  api call");
  next();
});
app.get('/users', function (req, res) {
  res.json(users);
});
app.get('/', function (req, res) {
  res.json({
    msg: 'API running '
  });
});
app.listen(PORT, function () {
  console.log("server running on port ".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJhcHAiLCJQT1JUIiwibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicmVzdFJvdXRlciIsInJlcSIsInJlcyIsIm5leHQiLCJlcnJvciIsIkVycm9yIiwic3RhdHVzIiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciLCJnZXQiLCJ1c2VycyIsIm1zZyIsImxpc3RlbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFJQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQU5BLElBQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsSUFBTUMsR0FBRyxHQUFHRixPQUFPLEVBQW5CO0FBQ0EsSUFBTUcsSUFBSSxHQUFHLElBQWI7QUFLQUMscUJBQVNDLE9BQVQsR0FBa0JDLE1BQU0sQ0FBQ0QsT0FBekI7O0FBQ0FELHFCQUFTRyxPQUFULENBQWlCLDZCQUFqQixFQUErQztBQUFDQyxFQUFBQSxlQUFlLEVBQUMsSUFBakI7QUFBc0JDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTFDLENBQS9DLEUsQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBUCxHQUFHLENBQUNRLEdBQUosQ0FBUUMsdUJBQVdDLElBQVgsRUFBUjtBQUNBVixHQUFHLENBQUNRLEdBQUosQ0FBUUMsdUJBQVdFLFVBQVgsQ0FDSjtBQUFFQyxFQUFBQSxRQUFRLEVBQUM7QUFBWCxDQURJLENBQVI7QUFHQVosR0FBRyxDQUFDUSxHQUFKLENBQVEsdUJBQVI7QUFDQVIsR0FBRyxDQUFDUSxHQUFKLENBQVEsTUFBUixFQUFlSyxlQUFmO0FBQ0FiLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLFVBQUNNLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQWtCO0FBQ3RCLE1BQU1DLEtBQUssR0FBRyxJQUFJQyxLQUFKLENBQVUsV0FBVixDQUFkO0FBQ0FELEVBQUFBLEtBQUssQ0FBQ0UsTUFBTixHQUFlLEdBQWY7QUFDQUYsRUFBQUEsS0FBSyxDQUFDRyxPQUFOLEdBQWMsZUFBZDtBQUNBSixFQUFBQSxJQUFJLENBQUNDLEtBQUQsQ0FBSjtBQUdILENBUEQ7QUFRQWpCLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLFVBQUNTLEtBQUQsRUFBT0gsR0FBUCxFQUFXQyxHQUFYLEVBQWVDLElBQWYsRUFBc0I7QUFDMUJELEVBQUFBLEdBQUcsQ0FBQ0ksTUFBSixDQUFXRixLQUFLLENBQUNFLE1BQU4sSUFBYyxHQUF6QjtBQUNBLFNBQU9KLEdBQUcsQ0FBQ0wsSUFBSixDQUFTO0FBQ1pPLElBQUFBLEtBQUssRUFBRTtBQUNIRyxNQUFBQSxPQUFPLEVBQUVILEtBQUssQ0FBQ0c7QUFEWjtBQURLLEdBQVQsQ0FBUDtBQUtILENBUEQ7QUFTQXBCLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLFVBQVVNLEdBQVYsRUFBZUMsR0FBZixFQUFtQkMsSUFBbkIsRUFBd0I7QUFDNUJLLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDZCQUFaO0FBQ0FOLEVBQUFBLElBQUk7QUFDUCxDQUhEO0FBSUFoQixHQUFHLENBQUN1QixHQUFKLENBQVEsUUFBUixFQUFpQixVQUFDVCxHQUFELEVBQU1DLEdBQU4sRUFBWTtBQUN6QkEsRUFBQUEsR0FBRyxDQUFDTCxJQUFKLENBQVNjLEtBQVQ7QUFDSCxDQUZEO0FBR0F4QixHQUFHLENBQUN1QixHQUFKLENBQVEsR0FBUixFQUFZLFVBQUNULEdBQUQsRUFBTUMsR0FBTixFQUFZO0FBQ3BCQSxFQUFBQSxHQUFHLENBQUNMLElBQUosQ0FDSTtBQUFFZSxJQUFBQSxHQUFHLEVBQUM7QUFBTixHQURKO0FBR0gsQ0FKRDtBQUtBekIsR0FBRyxDQUFDMEIsTUFBSixDQUFXekIsSUFBWCxFQUFnQixZQUFJO0FBQ2hCb0IsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLGtDQUFzQ3JCLElBQXRDO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuY29uc3QgUE9SVCA9IDMwMDBcbmltcG9ydCB7IHJlc3RSb3V0ZXIgfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCAgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xubW9uZ29vc2UuUHJvbWlzZT0gZ2xvYmFsLlByb21pc2U7XG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L2lubm90eW0nLHt1c2VOZXdVcmxQYXJzZXI6dHJ1ZSx1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUgfSk7XG4vLyBjb25zdCB1c2Vycz1bXG4vLyAgICAge2lkOiAxLCBuYW1lOidKb2huJ30sXG4vLyAgICAge2lkOiAyLCBuYW1lOidKb2hueSd9LFxuLy8gICAgIHtpZDogMywgbmFtZTonVG9ueSd9LFxuLy8gICAgIHtpZDogNCwgbmFtZTonUm9ja3knfSxcbi8vIF1cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoXG4gICAgeyBleHRlbmRlZDpmYWxzZSB9XG4pKTtcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoJy9hcGknLHJlc3RSb3V0ZXIpO1xuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpPT57XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJOb3QgRm91bmZcIik7XG4gICAgZXJyb3Iuc3RhdHVzID0gNDA0O1xuICAgIGVycm9yLm1lc3NhZ2U9XCJJbnZhbGlkIHJvdXRlXCI7XG4gICAgbmV4dChlcnJvcik7XG4gICAgXG5cbn0pXG5hcHAudXNlKChlcnJvcixyZXEscmVzLG5leHQpPT57XG4gICAgcmVzLnN0YXR1cyhlcnJvci5zdGF0dXN8fDUwMCk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHtcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgfVxuICAgIH0pXG59KTtcblxuYXBwLnVzZShmdW5jdGlvbiAocmVxLCByZXMsbmV4dCl7XG4gICAgY29uc29sZS5sb2coXCJtaWRkbGV3YXJlIGJlZm9yZSAgYXBpIGNhbGxcIik7XG4gICAgbmV4dCgpO1xufSk7XG5hcHAuZ2V0KCcvdXNlcnMnLChyZXEsIHJlcyk9PntcbiAgICByZXMuanNvbih1c2Vycylcbn0pXG5hcHAuZ2V0KCcvJywocmVxLCByZXMpPT57XG4gICAgcmVzLmpzb24oXG4gICAgICAgIHsgbXNnOidBUEkgcnVubmluZyAnIH1cbiAgICAgICAgKVxufSlcbmFwcC5saXN0ZW4oUE9SVCwoKT0+e1xuICAgIGNvbnNvbGUubG9nKGBzZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7UE9SVH1gKTtcbn0pO1xuIl19