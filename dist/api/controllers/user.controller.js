"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _employee = _interopRequireDefault(require("../models/employee.model"));

var _findAll$findOne$find;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (_findAll$findOne$find = {
  findAll: function findAll(req, res) {
    // res.json({msg:"find all users"});
    _employee["default"].find().then(function (employee) {
      return res.json(employee);
    })["catch"](function (err) {
      return res.status(500).json(err);
    });
  },
  findOne: function findOne(req, res) {
    var id = req.params.id;

    _employee["default"].findById(id).then(function (employee) {
      if (!employee) {
        return res.status(400).json({
          err: "employee not found"
        });
      } else {
        return res.json(employee);
      }
    })["catch"](function (err) {
      return res.status(500).json(err);
    });
  }
}, _defineProperty(_findAll$findOne$find, "findOne", function findOne(req, res) {
  var id = req.params.id;

  _employee["default"].findByIdAndRemove(id).then(function (employee) {
    if (!employee) {
      return res.status(400).json({
        err: "employee not found"
      });
    } else {
      return res.json(employee);
    }
  })["catch"](function (err) {
    return res.status(500).json(err);
  });
}), _defineProperty(_findAll$findOne$find, "update", function update(req, res) {
  var id = req.params.id;

  _employee["default"].findByIdAndUpdate({
    _id: id
  }, {
    $set: req.body
  }, {
    "new": true
  }).then(function (employee) {
    if (!employee) {
      return res.status(400).json({
        err: "employee not found"
      });
    } else {
      return res.json(employee);
    }
  })["catch"](function (err) {
    return res.status(500).json(err);
  });
}), _defineProperty(_findAll$findOne$find, "create", function create(req, res) {
  var _req$body = req.body,
      no = _req$body.no,
      name = _req$body.name,
      salary = _req$body.salary,
      role = _req$body.role,
      age = _req$body.age,
      gender = _req$body.gender;

  if (!name) {
    return res.status(400).json({
      err: "name is required."
    });
  }

  if (!salary) {
    return res.status(400).json({
      err: "salary is required."
    });
  }

  if (!no) {
    return res.status(400).json({
      err: "no is required."
    });
  }

  if (!role) {
    return res.status(400).json({
      err: "role is required."
    });
  }

  if (!age) {
    return res.status(400).json({
      err: "age is required."
    });
  }

  if (!gender) {
    return res.status(400).json({
      err: "gender is required."
    });
  }

  _employee["default"].create({
    no: no,
    name: name,
    salary: salary,
    role: role,
    age: age,
    gender: gender
  }).then(function (employee) {
    return res.json(employee);
  })["catch"](function (arr) {
    return res.status(500).json(err);
  });
}), _findAll$findOne$find);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,